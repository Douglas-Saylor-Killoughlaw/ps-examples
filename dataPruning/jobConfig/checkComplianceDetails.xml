<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.36">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.12"/>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>20</daysToKeep>
        <numToKeep>10</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.BooleanParameterDefinition>
          <name>getJobs</name>
          <description>If set to true this will display the jobs that will be deleted/changed based on audit requirements. There is another &quot;getJobs&quot; within the script block that needs to match. Due to the use of pipelines the two variables are set independently.</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.80">
    <script>import com.cloudbees.opscenter.server.clusterops.steps.*
import com.cloudbees.opscenter.server.model.*
import hudson.model.*
import hudson.remoting.*
import jenkins.model.Jenkins
import java.util.HashMap
import com.cloudbees.hudson.plugins.folder.*
import jenkins.branch.OrganizationFolder
import jenkins.model.Jenkins
import org.jenkinsci.plugins.workflow.multibranch.*
import java.util.concurrent.TimeUnit

def enableErrorReporting = true
def lastError = null
def test= {params.audtit}
def masterData = []
sum = 0

Jenkins.instance.getAllItems(ConnectedMaster.class).each { it -&gt;
  def masterName = it.encodedName

  //println &quot;Running script on ${masterName}&quot;

  def script = &apos;&apos;&apos;
  import com.cloudbees.hudson.plugins.folder.*
  import com.cloudbees.hudson.plugins.modeling.impl.builder.BuilderTemplate
  import com.cloudbees.hudson.plugins.modeling.impl.folder.FolderTemplate
  import com.cloudbees.hudson.plugins.modeling.impl.jobTemplate.JobTemplate
  import com.cloudbees.hudson.plugins.modeling.impl.auxiliary.AuxModel
  import jenkins.branch.OrganizationFolder
  import jenkins.model.Jenkins
  import org.jenkinsci.plugins.workflow.multibranch.*
  import java.util.concurrent.TimeUnit

  VIOLATION_NO_LOG_ROTATION = &quot;NO LOG ROTATION&quot;
  VIOLATION_INCORRECT_LOG_ROTATION = &quot;INCORRECT LOG ROTATION&quot;
  VIOLATION_NEVER_EXECUTED = &quot;NEVER EXECUTED&quot;
  VIOLATION_NO_RECENT_BUILDS = &quot;NO RECENT BUILDS&quot;
  VIOLATION_EMPTY_FOLDER=&quot;EMPTY FOLDER&quot;
  VIOLATION_TOO_MANY_BUILDS=&quot;TOO MANY BUILDS&quot;
  VIOLATION_PREVIOUSLY_FLAGGED=&quot;NOT CORRECTED SINCE PREVIOUS AUDIT&quot;

  DAYS_TO_KEEP_BUILDS = 180
  NUM_TO_KEEP= 20
  DAYS_TO_KEEP_JOB = 365
  getJobs=true

  def processFolder(Item folder) {
      def violations = []
      if (!(folder.getFullName().contains(&quot;origami&quot;))){
      folder.getItems().each {
          if (it instanceof Folder) {
          if(it.getItems().size()&gt;0){
          violations += processFolder(it)
          } //if size is greater than zero
           else {
           def jobDescription=it.getDescription()
           
           if ((jobDescription==null)||(!(jobDescription.contains(&quot;This job/folder does not meet corporate standards&quot;)))){
                 violations += [[&quot;kind&quot;: VIOLATION_EMPTY_FOLDER,&quot;job&quot;: it.getFullName()]]}
              else{
              if (jobDescription.contains(&quot;This job/folder does not meet corporate standards&quot;))
              {
                 violations += [[&quot;kind&quot;: VIOLATION_PREVIOUSLY_FLAGGED,&quot;job&quot;: it.getFullName()]]
              }
              }
                }// folder size is 0
          } else if (it instanceof OrganizationFolder || it instanceof WorkflowMultiBranchProject) {
              violations += processSpecialFolder(it)
          } else {
              violations += processJob(it)
          }
      }
      }// skip the origami folder
      return violations
  }


  def processSpecialFolder(Item folder) {
      def violations = []
      if( folder.orphanedItemStrategy.daysToKeep &gt; DAYS_TO_KEEP_BUILDS.toInteger() ||folder.orphanedItemStrategy.numToKeep &gt;NUM_TO_KEEP.toInteger()){
        violations += [[&quot;kind&quot;: VIOLATION_INCORRECT_LOG_ROTATION,&quot;job&quot;: folder.getFullName()]]}
  folder.getItems().each {
      if (it instanceof OrganizationFolder || it instanceof WorkflowMultiBranchProject) {
          it.getItems().each{
      if (it.builds.size()&gt;NUM_TO_KEEP.toInteger()){
          violations += [[&quot;kind&quot;: VIOLATION_TOO_MANY_BUILDS,&quot;job&quot;: it.getFullName()]]
          }
          }//end it each
  }//end if it is org
  }// end folder each
      return violations
  }

  def processJob(Item job) {
      def violations = []
      def jobDescription=job.getDescription()
      if (job instanceof FolderTemplate || job instanceof JobTemplate|| job instanceof AuxModel || job instanceof ExternalJob || job instanceof BuilderTemplate||job.getName().contains(&quot;PR-&quot;)||job.getName()==&quot;Chef-master-seed&quot;||job.getName()==&quot;Chef-Remote-Factory&quot;||job.getName()==&quot;Import_Job_From_J1_to_J2&quot;||job.getName()==&quot;Create_Admin_Group&quot;||job.getName()==&quot;Create_Admin_Group&quot;||job.getName()==&quot;Examples&quot;||job.getName()==&quot;Chef_Search&quot;||job.getName()==&quot;Chef_Upload&quot;||job.getName()==&quot;Chef_node_cleanup&quot;||job.getName()==&quot;Node_Search&quot;||job.getName()==&quot;Non-Prod_Community_cookbooks&quot;||job.getName()==&quot;Non-Prod_self_service_delete_nodes&quot;||job.getName()==&quot;Prod_Chef_Push_Job&quot;||job.getName()==&quot;Prod_Community_cookbooks&quot;||job.getName()==&quot;Prod_self_service_delete_nodes&quot;) {
              return violations
      }
      if (!(job.isBuildable())&amp;&amp; (!(jobDescription==null)))
      { if (jobDescription.contains(&quot;This job/folder does not meet corporate standards&quot;))
      {
        violations += [[&quot;kind&quot;: VIOLATION_PREVIOUSLY_FLAGGED,&quot;job&quot;: job.getFullName()]]
      }
      }
      if (job.isBuildable() &amp;&amp; job.supportsLogRotator() &amp;&amp; job.getProperty(jenkins.model.BuildDiscarderProperty) == null) {
          violations += [[&quot;kind&quot;: VIOLATION_NO_LOG_ROTATION,&quot;job&quot;: job.getFullName()]]
      } else {
      if (job.logRotator &amp;&amp; (job.logRotator.daysToKeep &gt; DAYS_TO_KEEP_BUILDS.toInteger()||job.logRotator.daysToKeep==-1)||(job.logRotator &amp;&amp; (job.logRotator.numToKeep &gt; NUM_TO_KEEP.toInteger()||job.logRotator.numToKeep==-1)))  {
              violations += [[&quot;kind&quot;: VIOLATION_INCORRECT_LOG_ROTATION,&quot;job&quot;: job.getFullName()]]
          }
      }

      if(job.nextBuildNumber == 1) {
          def file = job.getConfigFile().getFile();
          def modified_in_seconds = TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis() - file.lastModified())
          def modified_in_days = TimeUnit.SECONDS.toDays(modified_in_seconds)
      if(modified_in_days &gt; DAYS_TO_KEEP_JOB) {
           if ((jobDescription==null)||(!(jobDescription.contains(&quot;This job/folder does not meet corporate standards&quot;)))) {
             violations += [[&quot;kind&quot;: VIOLATION_NEVER_EXECUTED,&quot;job&quot;: job.getFullName()]]
        }
      }// modified greater days to keep
      }

      def lastBuild = job.getLastBuild()
      if(lastBuild) {
          def last_build_in_seconds = TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis() - lastBuild.getTime().getTime())
          def lastbuild_in_days = TimeUnit.SECONDS.toDays(last_build_in_seconds)
       if(lastbuild_in_days &gt; DAYS_TO_KEEP_JOB) {
         if ((jobDescription==null)||(!(jobDescription.contains(&quot;This job/folder does not meet corporate standards&quot;)))){
           violations += [[&quot;kind&quot;: VIOLATION_NO_RECENT_BUILDS,&quot;job&quot;: job.getFullName()]]
         }
        }// last build greater days to keep
      }//last build
      if (job.builds.size()&gt;NUM_TO_KEEP.toInteger()){
              violations  += [[&quot;kind&quot;: VIOLATION_TOO_MANY_BUILDS,&quot;job&quot;: job.getFullName()]]}

      return violations
  }

  def violations = []
  Jenkins.instance.getItems().each {
      if (it instanceof Folder) {
          violations += processFolder(it)
      } else if (it instanceof OrganizationFolder || it instanceof WorkflowMultiBranchProject) {
          violations += processSpecialFolder(it)
      } else {
          violations += processJob(it)
      }
  }

  violations_by_kind = [:]
  violations_by_kind.put(&quot;EMPTY FOLDER&quot;,0)
  violations_by_kind.put(&quot;INCORRECT LOG ROTATION&quot;,0)
  violations_by_kind.put(&quot;NO LOG ROTATION&quot;,0)
  violations_by_kind.put(&quot;NO RECENT BUILDS&quot;,0)
  violations_by_kind.put(&quot;NEVER EXECUTED&quot;,0)
  violations_by_kind.put(&quot;TOO MANY BUILDS&quot;,0)
  violations_by_kind.put(&quot;NOT CORRECTED SINCE PREVIOUS AUDIT&quot;,0)
  violations.each {
      if(violations_by_kind[it[&quot;kind&quot;]] == null) {
          violations_by_kind[it[&quot;kind&quot;]] = 0
      }
      violations_by_kind[it[&quot;kind&quot;]]++
  }

  def sortedkind=violations_by_kind.sort()
  if (!(getJobs)){
  sortedkind.eachWithIndex { kind,count,i -&gt;
    print &quot;${count} &quot;
    }
    }
    else{
    def sortedViolations=violations.sort{it.kind}
    sortedViolations.each {
      println &quot;,${it.kind},${it.job}&quot;
      }
    }
  return;

return;
  &apos;&apos;&apos;
//def masterData
  try {
    def stream = new ByteArrayOutputStream();
    def listener = new StreamBuildListener(stream);
  if (it.online) {
 //   if(masterName== &quot;onelake&quot;){
    it.channel.call(
      new MasterGroovyClusterOpStep.Script(script,listener,&quot;${masterName}-08b004504a16430276cb5e49bfbdc31a5502ba76ee48ad3ee00eff5dae9b1006.groovy&quot;,new HashMap&lt;?, ?&gt;()))
    joinedInfo = masterName +&quot; &quot;+ stream.toString()+&quot;\n&quot;
    masterData += joinedInfo
    }//close if for single master
  }
  catch(Exception e) {
    lastError = e
    println &quot;FAILED&quot;
    println e
  }
}

if (&quot;${getJobs}&quot;==&quot;false&quot;){
 node
 {
 stage (&apos;results&apos;)
 {
     sh &apos;&apos;&apos;
     count=`ls -l ${JENKINS_HOME}/userContent/AuditList*.csv 2&gt;/dev/null |wc -l`
     if [ $count == 10 ]
     then
     rm ${JENKINS_HOME}/userContent/AuditList*.csv
     fi
     &apos;&apos;&apos;
     writeFile file:&quot;AuditList${BUILD_NUMBER}.csv&quot;,text:&quot;Masters EMPTY_FOLDER INCORRECT_LOG_ROTATION NEVER_EXECUTED NO_LOG_ROTATION NO_RECENT_BUILDS NOT_CORRECTED_SINCE_PREVIOUS_AUDIT TOO_MANY_BUILDS&quot;+&quot;\n&quot; + masterData.toString()
      sh &quot;mv AuditList${BUILD_NUMBER}.csv ${JENKINS_HOME}/userContent&quot;

     }
 }
}
else{
    node
 {
 stage (&apos;results&apos;)
 {
     sh &apos;&apos;&apos;
     count=`ls -l ${JENKINS_HOME}/userContent/jobList*.csv 2&gt;/dev/null |wc -l`
     if [ $count &gt; 10 ]
     then
     rm ${JENKINS_HOME}/userContent/jobList*.csv
     fi
     &apos;&apos;&apos;
     writeFile file:&quot;jobList${BUILD_NUMBER}.csv&quot;,text:&quot;Masters,Kind,Jobs&quot;+&quot;\n&quot; + masterData.toString()
      sh &quot;mv jobList${BUILD_NUMBER}.csv ${JENKINS_HOME}/userContent/jobList${BUILD_NUMBER}.csv&quot;
     }
 }
}
return
</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>