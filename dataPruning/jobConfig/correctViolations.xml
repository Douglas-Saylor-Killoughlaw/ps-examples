<?xml version='1.1' encoding='UTF-8'?>
<com.cloudbees.opscenter.server.clusterops.ClusterOpProject plugin="operations-center-clusterops@2.176.0.1">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.12"/>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>20</daysToKeep>
        <numToKeep>10</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <com.cloudbees.opscenter.server.clusterops.sources.ItemParameterDefinition>
          <name>masters</name>
          <description></description>
          <itemSource class="com.cloudbees.opscenter.server.clusterops.sources.JenkinsRootItemSource"/>
          <filters>
            <com.cloudbees.opscenter.server.clusterops.filter.IsMasterOnlineFilter/>
          </filters>
        </com.cloudbees.opscenter.server.clusterops.sources.ItemParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>dryRun</name>
          <description>If set to true the job will show wha jobs/builds would be deleted during the cleanup process.</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders/>
  <publishers/>
  <buildWrappers/>
  <operations>
    <com.cloudbees.opscenter.server.clusterops.operations.MasterClusterOperation>
      <itemSource class="com.cloudbees.opscenter.server.clusterops.sources.ParameterItemSource"/>
      <filters class="linked-list"/>
      <clusterOpSteps>
        <com.cloudbees.opscenter.server.clusterops.steps.MasterGroovyClusterOpStep>
          <script>import com.cloudbees.hudson.plugins.folder.*
import com.cloudbees.hudson.plugins.modeling.impl.builder.BuilderTemplate
import com.cloudbees.hudson.plugins.modeling.impl.folder.FolderTemplate
import com.cloudbees.hudson.plugins.modeling.impl.jobTemplate.JobTemplate
import com.cloudbees.hudson.plugins.modeling.impl.auxiliary.AuxModel
import jenkins.branch.OrganizationFolder
import jenkins.model.Jenkins
import org.jenkinsci.plugins.workflow.multibranch.*
import java.util.concurrent.TimeUnit
import groovy.transform.Field


VIOLATION_NO_LOG_ROTATION = &quot;NO LOG ROTATION&quot;
VIOLATION_INCORRECT_LOG_ROTATION = &quot;INCORRECT LOG ROTATION&quot;
VIOLATION_NEVER_EXECUTED = &quot;NEVER EXECUTED&quot;
VIOLATION_NO_RECENT_BUILDS = &quot;NO RECENT BUILDS&quot;
VIOLATION_EMPTY_FOLDER=&quot;EMPTY FOLDER&quot;
VIOLATION_TOO_MANY_BUILDS=&quot;TOO MANY BUILDS&quot;
VIOLATION_PREVIOUSLY_FLAGGED=&quot;NOT CORRECTED SINCE PREVIOUS AUDIT&quot;

DAYS_TO_KEEP_BUILDS = 180
NUM_TO_KEEP= 20
DAYS_TO_KEEP_JOB = 180

@Field def cleanedJobsTotal = 0
cleanedJobsLimit = 2
cleanJobList = []
def deletion= new Date() + 90
reasonForDisable=&quot;&lt;b&gt;This job/folder does not meet corporate standards, and will be deleted after ${deletion}&lt;/b&gt;&quot;
def temp= 0
def delList = []
//dryRun=false

def processFolder(Item folder) {
    def cleanJobList = []
    if (!(folder.getFullName().contains(&quot;origami&quot;))){
    folder.getItems().each {
        if (it instanceof Folder) {
           if(it.getItems().size()&gt;0){
            cleanJobList += processFolder(it)}
            else {
               def jobDescription=it.getDescription()
               if ((jobDescription==null)||(!(jobDescription.contains(&quot;This job/folder does not meet corporate standards&quot;)))){
                 cleanJobList += [[&quot;kind&quot;: VIOLATION_EMPTY_FOLDER,&quot;job&quot;: it.getFullName()]]}
              else
              if (jobDescription.contains(&quot;This job/folder does not meet corporate standards&quot;))
              {
              cleanJobList += [[&quot;kind&quot;: VIOLATION_PREVIOUSLY_FLAGGED, &quot;job&quot;: it.getFullName()]]
               }
                 }// if folder size greater 0
                 }// if it is Folder
            else if (it instanceof OrganizationFolder || it instanceof WorkflowMultiBranchProject) {
                     cleanJobList += processSpecialFolder(it)}
      else {
            cleanJobList += processJob(it)
        }
    }// end each
      }// skip the origami folder
    return cleanJobList
}


def processSpecialFolder(Item folder) {
      def cleanJobList=[]
        if( folder.orphanedItemStrategy.daysToKeep &gt; DAYS_TO_KEEP_BUILDS.toInteger() ||folder.orphanedItemStrategy.numToKeep &gt;NUM_TO_KEEP.toInteger()){
          cleanJobList += [[&quot;kind&quot;: VIOLATION_INCORRECT_LOG_ROTATION,&quot;job&quot;: folder.getFullName()]]}
    folder.getItems().each {
        if (it instanceof OrganizationFolder || it instanceof WorkflowMultiBranchProject) {
        it.getItems().each{
    if (it.builds.size()&gt;NUM_TO_KEEP.toInteger()){
            cleanJobList += [[&quot;kind&quot;: VIOLATION_TOO_MANY_BUILDS,&quot;job&quot;: it.getFullName()]]}
            }//end it each
    }//end if it is org
    }// end folder each
    return cleanJobList
}

def processJob(Item job) {
    def cleanJobList = []
    def jobDescription=job.getDescription()
    if (job instanceof FolderTemplate || job instanceof JobTemplate|| job instanceof AuxModel || job instanceof ExternalJob || job instanceof BuilderTemplate||job.getName().contains(&quot;PR-&quot;)||job.getName()==&quot;Chef-master-seed&quot;||job.getName()==&quot;Chef-Remote-Factory&quot;||job.getName()==&quot;Import_Job_From_J1_to_J2&quot;||job.getName()==&quot;Create_Admin_Group&quot;||job.getName()==&quot;Create_Admin_Group&quot;||job.getName()==&quot;Examples&quot;||job.getName()==&quot;Chef_Search&quot;||job.getName()==&quot;Chef_Upload&quot;||job.getName()==&quot;Chef_node_cleanup&quot;||job.getName()==&quot;Node_Search&quot;||job.getName()==&quot;Non-Prod_Community_cookbooks&quot;||job.getName()==&quot;Non-Prod_self_service_delete_nodes&quot;||job.getName()==&quot;Prod_Chef_Push_Job&quot;||job.getName()==&quot;Prod_Community_cookbooks&quot;||job.getName()==&quot;Prod_self_service_delete_nodes&quot;) {
        return cleanJobList
    }
    if (!(job.isBuildable())&amp;&amp; (!(jobDescription==null)))
    { if (jobDescription.contains(&quot;This job/folder does not meet corporate standards&quot;))
    {
      cleanJobList += [[&quot;kind&quot;: VIOLATION_PREVIOUSLY_FLAGGED,&quot;job&quot;: job.getFullName()]]
    }
    }
    else
    {
    if (job.isBuildable() &amp;&amp; job.supportsLogRotator() &amp;&amp; job.getProperty(jenkins.model.BuildDiscarderProperty) == null) {
       cleanJobList += [[ &quot;kind&quot;: VIOLATION_NO_LOG_ROTATION,&quot;job&quot;: job.getFullName()]]
    } else {
        if (job.logRotator &amp;&amp; (job.logRotator.daysToKeep &gt; DAYS_TO_KEEP_BUILDS.toInteger()||job.logRotator.daysToKeep==-1)||(job.logRotator &amp;&amp; (job.logRotator.numToKeep &gt; NUM_TO_KEEP.toInteger()||job.logRotator.numToKeep==-1)))  {
            cleanJobList += [[&quot;kind&quot;: VIOLATION_INCORRECT_LOG_ROTATION,&quot;job&quot;: job.getFullName()]]
        }
    }
    if(job.nextBuildNumber == 1 ) {
        def file = job.getConfigFile().getFile();
        long modified_in_seconds = TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis() - file.lastModified())
        def modified_in_days = (int)TimeUnit.SECONDS.toDays(modified_in_seconds)

      if(modified_in_days &gt; DAYS_TO_KEEP_JOB) {
      if ((jobDescription==null)||(!(jobDescription.contains(&quot;This job/folder does not meet corporate standards&quot;)))) {
        cleanJobList += [[&quot;kind&quot;: VIOLATION_NEVER_EXECUTED,&quot;job&quot;: job.getFullName()]]
   }
        }// if job description updated
      }// end if modified is greater then days to keep

    def lastBuild = job.getLastBuild()
    if(lastBuild) {
        def last_build_in_seconds = TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis() - lastBuild.getTime().getTime())
        def lastbuild_in_days = TimeUnit.SECONDS.toDays(last_build_in_seconds)
      if(lastbuild_in_days &gt; DAYS_TO_KEEP_JOB) {

             if ((jobDescription==null)||(!(jobDescription.contains(&quot;This job/folder does not meet corporate standards&quot;)))){
               cleanJobList += [[&quot;kind&quot;: VIOLATION_NO_RECENT_BUILDS, &quot;job&quot;: job.getFullName()]]
             }
               }// last build greater days to keep
    } //if lastBuild
    if (job.builds.size()&gt;NUM_TO_KEEP.toInteger()){
            cleanJobList += [[&quot;kind&quot;: VIOLATION_TOO_MANY_BUILDS,&quot;job&quot;: job.getFullName()]]}
            }
    return cleanJobList
}//end processJob

def correctViolations(lcldelList) {
    lcldelList.each  {
      def job =Jenkins.instance.getItemByFullName(it.job)
      if (!(job == null)){
      def jobClass=job.getClass().toString()
      // We are execluding pipeline jobs because a majority of them are jenkinsFiles. If we can differentiate between pipeline jobs and jenkinsfiles we can update this logic
      if (it.kind==&quot;NOT CORRECTED SINCE PREVIOUS AUDIT&quot;){
       if (dryRun)
       {
        println &quot;This job will be deleted because it hasn&apos;t changed since the last audit &quot; +it.job
       }
       else{
        job.delete()
       }
      }
      if(it.kind==&quot;NO LOG ROTATION&quot;||it.kind==&quot;INCORRECT LOG ROTATION&quot;)
      {
      //If the job has incorrect or no rotation strategy we will correct it here
      if(dryRun){
        println &quot;Updating  log rotation for job &quot;+it.job}
      else{
        if (jobClass.contains(&quot;multibranch&quot;)||jobClass.contains(&quot;OrganizationFolder&quot;))
        {
          job.setOrphanedItemStrategy(new com.cloudbees.hudson.plugins.folder.computed.DefaultOrphanedItemStrategy(true,DAYS_TO_KEEP_BUILDS,-1))
          job.save()
          job.doReload()
        }
        else{
            job.setBuildDiscarder(new hudson.tasks.LogRotator(DAYS_TO_KEEP_BUILDS,NUM_TO_KEEP))
            job.save()}
            job.doReload()
           }
           }//end &quot;log ROTATION&quot;
                  else
          if (it.kind==&quot;TOO MANY BUILDS&quot;){
          if(dryRun){
            def recent = job.builds.limit(NUM_TO_KEEP)
            for (build in job.builds){
            if (!recent.contains(build)){
              println &quot;Preparing to delete: &quot; + build}}
              }// end of dryRun
          else{
          def recent = job.builds.limit(NUM_TO_KEEP)
            if(job.builds.size()&lt;500){
              for (build in job.builds){
                if (!recent.contains(build)){
                if(!(build.keepLog)){
                  build.delete()
                  }// end if keep log is false
                  }// if recent
                }// end for loop
               job.save()
               job.doReload()
           }// end if size greater then 500
          else {
           println &quot;Clean this job manually &quot; +job.getFullName()
                  }
                  }
                  }// too many builds
           else
             if(it.kind==&quot;NEVER EXECUTED&quot;||it.kind==&quot;NO RECENT BUILDS&quot;)
           		{
                def lastBuild = job.getLastBuild()
                  if (lastBuild){
                def last_build_in_seconds = TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis() - lastBuild.getTime().getTime())
                def lastbuild_in_days = TimeUnit.SECONDS.toDays(last_build_in_seconds)
                if(lastbuild_in_days &gt;= 365) {
                  job.delete()
                }
                }
                else
                {
                job.setDescription(reasonForDisable)
                job.setDisabled(true)
                job.save()
                job.doReload()
                }
                }//end if no recent builds
        else
          if (it.kind==&quot;EMPTY FOLDER&quot;){
          def file = job.getConfigFile().getFile();
          long modified_in_seconds = TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis() - file.lastModified())
          def modified_in_days = (int)TimeUnit.SECONDS.toDays(modified_in_seconds)
            if(modified_in_days&gt;=90){
              job.delete()
            }//end modified greater then 90
            else{
            job.setDescription(reasonForDisable)
            job.save()
            job.doReload()
            }//modified less then 90
          }// end empty folder

      }//if job isn&apos;t null
    }//end each
  }// end of correctViolations


Jenkins.instance.getItems().each {
    if (it instanceof Folder) {
        cleanJobList += processFolder(it)
    } else if (it instanceof OrganizationFolder || it instanceof WorkflowMultiBranchProject) {
        cleanJobList += processSpecialFolder(it)
    }
  else {
        cleanJobList += processJob(it)
    }
}




def sortedcleanJobList=cleanJobList.sort()
for (violations=0;violations&lt; sortedcleanJobList.size();violations++){
    if (!(sortedcleanJobList[violations].kind== null)){
    delList += [[&quot;kind&quot;: sortedcleanJobList[violations].kind, &quot;job&quot;: sortedcleanJobList[violations].job]]
   }// if violations not null
  correctViolations(delList)
  delList.clear()
}//end for violations in
</script>
        </com.cloudbees.opscenter.server.clusterops.steps.MasterGroovyClusterOpStep>
      </clusterOpSteps>
      <noRetries>0</noRetries>
      <inParallel>0</inParallel>
      <timeoutSeconds>0</timeoutSeconds>
      <failureMode>IMMEDIATELY</failureMode>
      <failAs>
        <name>FAILURE</name>
        <ordinal>2</ordinal>
        <color>RED</color>
        <completeBuild>true</completeBuild>
      </failAs>
    </com.cloudbees.opscenter.server.clusterops.operations.MasterClusterOperation>
  </operations>
</com.cloudbees.opscenter.server.clusterops.ClusterOpProject>